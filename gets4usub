#!/usr/bin/perl
#
# gets4usub script version 1.0.1
# by jenkins101
#
# Depends on libxml-treepp-perl and p7zip-rar 
#

use strict;
use File::Basename;
use XML::TreePP;
use LWP::Simple;  
use File::Find;
use Getopt::Long;
use utf8;

# extensions to match in search.
my $extensions = qw'\.avi|\.wmv|\.mp4|\.mkv';

# ApiKey max 60 downloads a day.
my $ApiKey = 'Er3lpPms8511fTTm';

# Declaration of variables...
my ($silent, $searchType, $searchTerm, $subFile, $sub, $search_for);

GetOptions ("silent" => sub {$silent = "1"},
	    "movie" => sub {$search_for = "movie"},
	    "serie" => sub {$search_for = "serie"});
# Flush
$|=1;

# unicode support
binmode(STDOUT, ":utf8");

&usage unless $ARGV[0];

# Begin...
find(\&findfiles,$ARGV[0]);

sub findfiles {
  my $file = $File::Find::name;

  return unless -f $file;
  return if $_ =~ /sample/i;

  # Split the input...
  my($fileName, $dir, $suffix) = fileparse("$file", qr/\.[^.]*/);
  return unless $suffix =~ m/$extensions/io;
  if ( -f "$dir$fileName.Swedish.srt" ) {
    if (!$silent) { print "Sub exists for $file\n"; }
    return;
}

# Store as this
$file = "$dir/$fileName-s4u.rar";  

# First try dirname usualy the best.
$searchTerm = basename($dir);
$searchType = "rls";
$subFile = getSubFile("$searchTerm");

# If not unique match from dirname try filename.
if (!$subFile) {
   print "no sub for rel: $searchTerm \n";
   $searchType = "fname";
   $searchTerm = "$fileName";
   $subFile = getSubFile("$searchTerm");
}

# Do we have a URL...
if (!$subFile || $subFile == 2) {
   if (!$silent) { print "Could not find sub for $searchTerm \n"; }
} else {
   print "Found sub for $searchTerm \n";
   getstore($subFile,$file,) or die "Failed to fetch $subFile: $!\n";

# Extract and rename to filename...
   system ("7z e -y -o$dir $file >/dev/null");
   $sub = `7z t $file | egrep ".sub|.srt"`;
   $sub =~ s/Testing     //g;
   chomp($sub);
   my $count = split("\n",$sub);
   if ( $count gt 1 ) {
      print "Multiple subs in archive $file, can't rename... \n";
      return ;
   }
   my $sub = "$dir$sub";
   my $newsub = "$dir$fileName.Swedish.srt";
   print "Renaming sub to $newsub \n";
   rename($sub,$newsub) or die "Failed to rename $sub to $newsub: $!\n";
}
}

sub getSubFile {
# returns subs URL for downloading...
        my ($SearchTerm) = @_;
        my $search_url = "http://api.s4u.se/all/$ApiKey/xml/all/$searchType/$SearchTerm/";
        my $tpp = XML::TreePP->new();
        my $tree = $tpp->parsehttp( GET => "$search_url" );
   	print "$search_url \n";


	if (!$search_for) {
            if ($tree->{xmlresult}->{info}->{hits_serie_sub}) {
                $search_for = "serie" ;
            } 
	    if ($tree->{xmlresult}->{info}->{hits_movie_sub}) {
                $search_for = "movie" ;
            } 
	} else {
            my $hits_sub = "hits_$search_for\_sub" ;
	    if (!$tree->{xmlresult}->{info}->{$hits_sub}) {
	       return;
	    }
	}

	if (!$search_for) {
            return; 
        } else {
           if (ref($tree->{xmlresult}->{$search_for}->{sub}) eq 'ARRAY') {
                print "Did not find unique match for $searchTerm \n";
                print "using: $search_url \n";
		if (($searchType == 'rls') || ($search_for == 'serie')) {
			return $tree->{xmlresult}->{$search_for}->{sub}->[0]->{download_zip};
		} else {
			return;
		}
           } else {
		if (!$silent) { print "Found $search_for hit for $searchTerm\n"; }
                return $tree->{xmlresult}->{$search_for}->{sub}->{download_zip};
           }
        }

}

sub usage {
  my $name = fileparse($0);
  print "This script takes a path and searches for media files to find subtitles for.\n";
  print "It takes some optional parameters.\n";
  print "usage: $name {-silent|(-serie|-movie)} path-to-search-for-files\n";
  print "\n";
  exit 1;
}

1;

